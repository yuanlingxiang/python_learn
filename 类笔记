1、概念
抽象：
对问题的建模，模型定义了问题的属性以及访问属性的接口

封装：
对数据的隐藏

接口：
描述了对数据属性的访问方法

合成
把几个类组合到一个类中

派生：
即创建子类

继承：
即继承父类

继承结构：
描述了从祖先类到父类的关

多态
对象间如何通过共有属性和方法来操作和访问

自省：
可以查询对象具有的功能

包装
对一个已存在的对象，增加新的，删除不要的，或者修改其它已存在的功能

描述符：
只有新式类才有描述符，通过描述符访问对象属性

只要具有：
__get__()
__set__()
__delete__()
三者或三者之一的类都可以当做描述符使用

具备__get__()、__set__()的类叫着数据描述符
具备__get__()的类叫着非数据描述符


描述符获取属性的优先级：
类属性-->数据描述符-->实例属性-->非数据描述符-->__getattr__()


'数据描述符'
class DevNull1(object):
    def __get__(self, obj, owner):
        pass
    def __set__(self, obj, val):
        pass
''
class C1(object):
    foo = DevNull()
	
c1 = C1()
c1.foo = 'bar'

print 'c1.foo', c1.foo

输出结果：
None
解释：
c1.foo先通过数据描述符的值，此时数据描述符返回的None
所以打印的是秒速符里面的__get__()值

————————————————————————————————————————————————————————————————
2、类属性
查看类属性：
方法1：
dir(类名)：返回由类属性组成的列表
方法2：
类名.__dict__()：放回一个字典，键为类的属性名，值为属性对应的数据值
_____________________________________________________________
调用类属性：
通过：
"类名.属性名"和"实例.属性名"进行调用
_____________________________________________________________

修改类属性：
通过"类名.属性名"进行修改

当类属性为可变对象的时候，可以通过"实例名.类属性"进行修改

不能通过"实例名.类属性"的方法删除类属性
_____________________________________________________________

特殊类属性：
C.__name__ ：类Ｃ的名字
C.__doc__ ：类Ｃ的文档字符串
C.__bases__ ：类Ｃ的所有父类构成的元组，不显示继承的祖先类
C.__module__ ：类Ｃ定义所在的模块
c.__mro__：查看类的方法搜索顺序

__slots__:用于定义类的属性，定义了__slots__，就不能动态的新增属性。相比与__dict__，更加节省内存


#通过定义类有'foo'和 'bar'两个属性
class SlottedClass(object):
	__slots__ = ('foo', 'bar')

内建类型的对象没有__dict__属性
_____________________________________________________________
3、类方法：在类中定义的函数

调用绑定方法
通过
实例名.方法进行调用
_____________________________________________________________
调用非绑定方法
通过
类名.方法(实例)方式进行调用

用的最多的地方：
继承时，覆盖父类的构造函数，如下
super(子类名, self).__init__()

_____________________________________________________________
静态方法
可以通过类和实例进行调用

定义：
class MyClass(object):
    @staticmethod
    def func1():
        pass
_____________________________________________________________	
类方法
可通过类和实例进行调用

定义：
class MyClass(object):
    @classmethod
    def func2(cls):
        print 'classmethod'
		
_____________________________________________________________
继承
子类可以使用基类的所有方法和属性
但是不能修改基类的方法和属性
不能继承基类的字符串文档

______________________________________________________________
覆盖：
子类定义的方法会覆盖父类定义的方法

当子类的方法覆盖父类的方法时，要调用父类的方法，只能通过:
父类.类方法（实例名）的方式进行调用

——————————————————————————————————————————————————————————————

5、私有化
类属性私有化
子类加双下划线的属性不会覆盖父类中同名的属性

访问带双下划线的属性时，只能通过如下方式：
'类名__属性名'进行访问，如：
实例._MyClass__a

______________________________________________________________
6、实例属性

创建实例
调用类就可以创建实例
如：
m = C()
______________________________________________________________
实例的属性
可以通过
动态设置和__init__ (self)两种方法设置实例属性
__________________________________________________________________
查看实例属性
方法1：
dir(实例名)：返回由类属性组成的列表
方法2：
实例名.__dict__：放回一个字典，键为类的属性名，值为属性对应的数据值

__________________________________________________________________
修改实例属性
通过：
实例名.属性 = 'xx'的方式进行修改
__________________________________________________________________
调用实例属性
通过：
实例名.属性的方式进行调用

__________________________________________________________________
特殊实例属性
m.__class__ ：实例的类

____________________________________________________________________
跟踪实例个数
方法如下：
class C(object):
	count = 0
	def __init__(self):
		C.count += 1
    def __del__(self):
		C.count -= 1
    def how_many(self):
		return C.count

c1 = C()
c2 = C()

del c1
c2.how_many()
del c2
C.count
__________________________________________________________________
7、从标准类型派生

从不可变对象进行派生
__new__方法是一个类方法， 第一个参数必须为cls，返回一个实例

举例：
class RoundFloat(float):
	def __new__(cls, val):
		#调用父类的__new__方法
		return super(RoundFloat, cls).__new__(cls, round(val, 2))
	
__________________________________________________________________	
从可变对象派生
举例：
class SortedKeyDict(dict):
    #重新定义字典的dict方法
	def keys(self):
		return sorted(super(SortedKeyDict, self).keys())

__________________________________________________________________

8、类的定制方法

基本类型定制：
__str__(self)：可打印字符串输出
__repr__(self)：运行时，字符串输出
__unicode__(self)：Unicode 字符串输出
__call__(self, *args)：表示可调用的实例
__nonzero__(self)：为object 定义False 值
__len__(self)：返回长度
		
__________________________________________________________________
比较方法：
__cmp__(self, obj)
C.__lt__(self, obj) 
C.__gt__(self, obj) 
C.__eq__(self, obj)
__________________________________________________________________
属性：
C.__getattr__(self, attr)
C.__setattr__(self, attr, val)
C.__delattr__(self, attr)
C.__getattribute__(self, attr)
C.__get__(self, attr) 
C.__set__(self, attr, val)
C.__delete__(self, attr) 
__________________________________________________________________
运算符
C.__*add__(self, obj)
C.__*sub__(self, obj)
C.__*mul__(self, obj)
C.__*div__(self, obj)
C.__*truediv__(self, obj) 
C.__*floordiv__(self, obj) 
C.__*mod__(self, obj)
C.__*divmod__(self, obj)
C.__*pow__(self, obj[, mod])
C.__abs__(self)：

__________________________________________________________________
位运算操作符
C.__*lshift__(self, obj)：左移
C.__*rshift__(self, obj)：右移
C.__*and__(self, obj)：按位与
C.__*or__(self, obj)：按位或
C.__*xor__(self, obj)：按位异或
C.__neg__(self)：一元负
C.__pos__(self)：一元正
C.__invert__(self)：按位求反
__________________________________________________________________
数据类型转换
C.__complex__(self, com)：转为复数型
C.__int__(self)：转为整型
C.__long__(self)：转为长整型
C.__float__(self)：转为浮点型
C.__coerce__(self, num)：压缩成同样的数值类型
C.__index__(self)：在有必要时,压缩可选的数值类型为整型（比如：用于切片索引等等）
__________________________________________________________________
进制转换
C.__oct__(self)：八进制表示
C.__hex__(self)：十六进制表示
__________________________________________________________________
序列转换
C.__getitem__(self, ind)：获取值
C.__setitem__(self, ind,val)：设置值
C.__delitem__(self, ind)：删除值
C.__getslice__(self, ind1,ind2)：获取序列片段
C.__setslice__(self, i1, i2,val)：设置序列片段
C.__delslice__(self, ind1,ind2)：删除序列片段
C.__contains__(self, val)：测试序列成员
C.__iter__(self)：创建迭代类
__________________________________________________________________
映射类型
C.__hash__(self)：散列(hash)函数值
C.__getitem__(self,key)：获取给定键(key)的值
C.__setitem__(self,key,val)：设置给定键(key)的值
C.__delitem__(self,key)：删除给定键(key)的值
C.__missing__(self,key)：给定键如果不存在字典中，则提供一个默认值

__________________________________________________________________
9、内建函数：
issubclass(sub, sup)：返回bool值，判断一个类是否是另一个类的子类；sup可以是元组
__________________________________________________________________
isinstance()
isinstance(obj1, obj2)
判断一个obj1是否是obj2的实例；obj2：可以是一个元组
__________________________________________________________________
hasattr()
判断一个对象是否有指定的属性
hasattr(obj1, 'xxx')

__________________________________________________________________
getattr()
获取对象的属性值，获取的属性不存在时，引发error
，可以设置一个默认值
getattr(obj1, 'xxx')
__________________________________________________________________
setattr()
设置对象属性值
setattr(实例，  '属性名', '值')
__________________________________________________________________
delattr()
删除对象属性值
__________________________________________________________________
dir()
显示对象的属性
dir()作用在实例上时，显示实例变量，还有在实例所在的类及所有它的基类中定义的方法和类属性
dir()作用在类上时，则显示类以及它的所有基类的__dict__中的内容。但它不会显示定义在元类（metaclass）中的类属性。
dir()作用在模块上时，则显示模块的__dict__的内容。
dir()不带参数时，则显示调用者的局部变量。
__________________________________________________________________
super()
帮组子类找到相应的父类
super(子类名[, obj])
obj可以是实例，也可以是类
__________________________________________________________________
vars()
功能和dir(obj)类似
如果给定的obj没有属性，则会引发以typerror错误
对于不带参数的vars():返回一个本地一个包含本地
名字空间的属性（键）及其值的字典

__________________________________________________________________
10、相关模块：
operator:标准操作符的函数接口
types:定义所有Python对象的类型名字
UserString:提供一个字符串封装类
UserDict:提供一个字典封装类
UserList：提供一个列表封装类







