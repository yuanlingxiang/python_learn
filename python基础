1,数字类型
三种整型：int， long， bool
其他：complex, float
从python2.3开始，不会存在整型溢出错误， 结果会自动的被转换为长整数

2，字符串
不支持反向截取子串
如:string[-1:-3]将返回一个空的字符串

3，列表，元组
可存储任意的python对象

4，print x, 
可以使输出在同一行
print
仅仅输出一个换行


5, 类
类变量可以被通过实例.类变量或者类名.类变量的方法访问
__init__函数是初始化实例的属性，创建实例后自动调用的第一个方法




1、为什么不需要事先声明变量
解释器会根据赋值号右侧的对象获取对象的类型

2、引用计数
对象被引用的次数

3、数据类型：
标准类型：
int, float, complex, bool, str, 列表，字典，元组
其他类型：
类，方法，函数，NoneType，集合，文件类型，模块

4、工厂函数
int(), long(), float(), complex()
str(), unicode()
list(), tuple()
type()


dict()
bool()
set(), frozenset()
object()
classmethod()
staticmethod()
super()
property()
file()

5、可调用对象
可用callable(obj)判断进行判断，返回bool值


6、执行对象
compile()
编译代码为代码对象

例子：
compile(arg1, arg2, arg3)
arg1：编译的代码对象
arg2：一个空字符串，用于表示代码对象的名字
arg3：三个可能值
如果arg1是表达式，则取eval
如果arg1是单一可执行语句，则取exec
如果arg1是语句块，则取exec


exec
可用于执行python代码，返回执行结果
可用于执行文件对象：
f = open(path)
exec f

eval:
用于对表达式求值或者执行python字符串

execfile()
可以用于执行python文件，并自动关闭

os.system()
执行系统命令，如：
os.system('dir')
结果立即打印打屏幕上
返回状态：0表示成功，1表示失败


os.popen()
用于执行系统命令，不显示返回结果，返回文件对象
f = os.popen(系统命令)

7,在交互式解释器中：
用print语句显示变量的字符串表示， 调用的str()
使用变量名查看该变量的原始值，调用repr()
repr(obj):可以得到该对象的本身


8,通过print重定向输出到文件
print >> 重定向输入位置, '输出内容'

f = open(path, 'w')
print >> f, '输出内容'
f.close()

9,运算符优先级：
乘方>单目>剩，除，求与>加，减

10,变量赋值：是将对象的引用赋值给变量
表达式不会返回值，如下
x = (x = x+1) 回报语法错误

11，通过keyword.kwlist可以查看Python的关键字

12，带下滑线变量
_xx：只能在模块或类中使用，不用'from module import *'导入
__xx__:系统定义变量
__xx:类的私有变量

13，模块写作规范
起始行：一般linux中使用，有起始行就就能够仅输入脚本名字来执行脚本
模块文档：简要介绍模块的功能及重要全局变量的含义，模块外可通过 module.__doc__ 访问这些内容。
模块导入：导入当前模块的代码需要的所有模块；每个模块仅导入一次（当前模块被加载时）；函数内部的模块导入代码不会被执行， 除非该函数正在执行。
变量定义：这里定义的变量为全局变量，本模块中的所有函数都可直接使用
类定义语句：当模块被导入时class 语句会被执行, 类也就会被定义。类的文档变量是class.__doc__
函数定义语句：可以通过module.function()在外部被访问到，当模块被导入时 def 语句
会被执行， 函数也就都会定义好，函数的文档变量是function.__doc__。
主程序：无论这个模块是被别的模块导入还是作为脚本直接执行，都会执行这部分代码

14，
如果模块是被导入， __name__ 的值为模块名字
如果模块是被直接执行， __name__ 的值为 '__main__'

15，变量无需事先声明和定义，但是必须在赋值的条件下才能被使用

16，类就是类型，实例就是对象，通过类型描述了对象规则

17，数字类型：整型、长整型、布尔型、浮点型、十进制浮点型和复数

18，random
random.randint(a, b)：返回[a, b]之间的整数
random.uniform(a, b)：返回[a, b)之间的浮点数
random.random()：返回[0, 1]之间的浮点数
random.randrange(a, b)：随机返回[a, b]直接的一个数

















