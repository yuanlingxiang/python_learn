1、参数
形参
位置参数：
def func(arg):
	pass

arg:就是一个位置参数，必须放在最前面

默认参数：
默认参数就是声明了默认值的参数

def func(arg1=1, args=2):
	pass

arg1, arg2：就是默认参数

可变长度参数：
*args:非关键子参数，以元组形式实参，若没有多余的实数，则该元组为空

**kw：关键子参数，以字典的形式保留关键字参数，若没有多余的额外关键字参数，该字典为空

实参：
关键字参数
对函数调用而言，允许实参不按顺序
实参中以 '形参 = xx' 形式给出的参数

参数组:
两种情况：
以元组形式参数
以字典形式参数

参数组需放到实参的最后位置进行传入
________________________________________________________________________________
2、内嵌函数
在函数中定义的函数
作用域仅在外部函数中，仅能通过外部函数调用时使用
不能单独调用内部函数，否则会出错

闭包：
在内部函数里引用了外部函数的变量，那么内部函数被认为是闭包的；这些变量叫着自由变量

闭包变量的名称空间不属于局部和全局名称空间。有自己的名称空间

自由变量存储在单元对象中，单元对象的作用是：在作用域接收后，存放自由变量
________________________________________________________________________________
3、装饰器：可以在不修改原函数的基础上，增加原函数的功能

有参装饰器：
语法：
@deco(args):
def foo():
	代码块

等价于
foo = deco(args)(foo)


def log(text):
    def decorator(func):
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

@log('execute')
def now():
    print('2015-3-25'

1、首先执行log('execute')，返回的是decorator函数
2、再调用返回的函数，参数是now函数，返回值最终是wrapper函数

无参装饰器：
语法：
@deco():
def foo():
	代码块

等价于
foo = deco(foo)

举例：
def loged(func):
    def wrapper():
        print '%s, %s' % (ctime(), func.__name__)
    return wrapper


@loged
def func1():
    pass

相当于执行loged(func1)

@为修饰符

________________________________________________________________________________
4、lambda函数
语法：
lambda [args]: expresion

返回的是一个函数对象
________________________________________________________________________________
5、内建函数
filter
语法：
filter(func, seq)
seq序列中的每个元素调用func，将返回为真的结果以列表形式保留下来

map
语法：
filter(func, seq)
seq序列中的每个元素调用func，将返回为真的结果以列表形式保留下来

reduce
语法：
reduce(func, seq)
func：是一个二元函数，接收两个参数值，将那个列表的内容“减少”为一个单一的值
它通过取出序列的头两个元素，将他们传入二元函数来获得一个单一的值来实现。然后又用这个值和序列的下一个元素来获得又一个值，
然后继续直到整个序列的内容都遍历完毕以及最后的值会被计算出来为止
________________________________________________________________________________
6、偏函数
from functools import partial

调用partial模块，生成偏函数

片函数的作用：
固定n个参数为参数，返回m-n个参数的函数对象
有利于代码的简洁

basetwo = partial(int, base=2)
注意，base需显示给出

basetwo('1111’)等价于int('1111', base=2)；使代码更加简洁

举例：
#固化多个参数
mybutton = partial(Tkinter.Button, root, fg='white', bg='blue')
b1 = mybutton(text='Button 1')
#固化单个参数
add100 = partial(add, 100)
#带关键子的偏函数
basetwo = partial(int, base=2)
________________________________________________________________________________
7、变量作用域
局部变量
在函数内部定义的变量，函数处于调用中时，变量有效，函数调用完毕，变量失效

全局变量
在函数外部定义的变量为全局变量，所有的函数均可访问，直到脚本运行完成，全局变量被释放


在函数内部使用关键子global 全局变量名称
global a = xx
可以修改全局变量

搜索标识符
1、首先在局部名称空间查找该名字，没有找到的话；
2、再在全局名称空间查找该名字，没有找到的话；
3、解释器就会报错

自由变量
内部函数使用的外部函数的变量
具有自己的名称空间，不同于全局和局部名称空间，常见与闭包的程序结构中
直到脚本运行完成，自由变量的名称空间被清空
________________________________________________________________________________
8、递归
函数包含了对其自身的调用，该函数就是递归的
________________________________________________________________________________
9、生成器
带yield关键子的函数，是一个生成器
圆括号括起来的列表解析式是一个生成器

方法1：
(i for i in range(9))
就是一个生成器

方法2：
def func1():
	yield 1     #返回中间结果1
	yield 2     #返回中间结果2


func1()就是一个生成器


生成器操作
获取生成器的下个值
生成器.next()

初始化生成器的值：
生产器.send(x)：将x复制给生成器


退出生成器：
生成器.close()




