1、概念
程序发生错误，在正确的控制流意外采取的行为

分为两个阶段：
1、程序发生错误，触发异常
2、处理异常：搜索适配的异常处理器，处理异常；如果没有适配的异常处理起，则逐级往上查找，最后还没有找到，解释器退出，显示跟踪回显消息
_________________________________________________________________________

2、捕获异常
捕获单个异常：
try:
	被检查的代码
except 异常类名, e:
	处理异常代码

e：异常的实例
____________________________________________________________
捕获多个异常：
多个except:
try:
	被检查代码
except, 异常类1，e:
	处理代码1
except, 异常类2，e:
	处理代码2
	
单个except:
try:
	被检查的代码
except (异常类1, 异常类2)， e:
	处理异常代码

e：异常的实例
____________________________________________________________

捕获所有异常:
try:
	被检查的代码
except Exception， e:
	处理异常代码

e：异常的实例
Exception：所有异常类的基类， KeyboardInterupt, SystemExit除外

____________________________________________________________
3、异常参数：
通常为指示错误原因的字符串，当异常发生时
异常参数自身组成一个元组，传递给异常处理器，做为异常类实例(e)进行存储

因为e是一个类实例，所以用str(e)来显示指示错误的字符串文字
____________________________________________________________
4、else子句：
try:
	被检查的代码
except 异常类, e:
    异常处理代码
else:
	代码快

else字句：仅当try中的代码没有异常时，才会执行
____________________________________________________________
5、finally子句
try:
	被检查的代码
except 异常类, e:
    异常处理代码
finally:
	代码快

finally字句:无论异常是否发生，都会执行

当异常发生时，立即执行finally字句代码，然后向上查找异常处理器
____________________________________________________________

6、raise语句
语法：
raise [,SomeExcetion [, args][, traceback]]]

SomeExcetion:异常类/字符串/实例

args：类似异常参数，传递给异常类

traceback：通常为None
____________________________________________________________

7、with语句
语法：
with context_expr [as var]:
	with_suite

支持的对象：
file
decimal.Context
thread.LockType
threading.Lock
threading.RLock
threading.Condition
threading.Semaphore
threading.BoundedSemaphore
____________________________________________________________
8、断言
语法：
assert expression[, arguments]
如果断言成功不采取任何措施(类似语句),否则触发
AssertionError(断言错误)的异常
____________________________________________________________
9、sys.exc_info()
返回三元素元组，用于存放异常信息

exc_type: 异常类
exc_value: 异常类的实例
exc_traceback: 追踪(traceback)对象











