1、符号
边界匹配：
开始进行匹配：
方法1：^str1
方法2：\Astr1

结束进行匹配：
方法1：str1$
方法2：str1\Z

匹配单词边界：
\b:匹配单词开始或结束
\B:匹配包含单词

单个字符匹配
".":可以匹配任意字符，换行符除外：
f.o：匹配"f"和"o"中间的任何字符，如fao, f9o, f#o

范围匹配：
用管道符匹配：
如，at|home可以匹配at， home

用中括号匹配：
[abcd]：匹配abcd中的任意一个
[a-d]：匹配a到d的任意一个字符
[^0-9]：排除该范围


多次匹配
匹配指定的次数：
{n}：左边的正则表达式匹配n次
{n, m}：左边的正则表达式匹配n到m次

零次或多次匹配：*

匹配一次或多次：+

匹配零次或一次：？

2、特殊符号
匹配任何数字
\d等价与[0-9]

匹配任何单个数字或字母
\w等价于[a-zA-Z0-9_]

匹配任何空白字符
\s等价与空白字符

逐一匹配特殊字符
\c

3、分组
使用圆括号可以对正则表达式的进行分组

匹配的字符串：
m.group(0)

显示字串：
m.group(n), n表示字串的位置，从1开始


4、内建方法
str1：为正则表达式

编译字符串为正则表达式对象：
re.compile(str1)

从开始匹配，成功返回匹配对象，否则返回None
re.match(str1, string)

在字符串中查找，成功返回一个匹配对象，否则返回None
re.search(str1, string)

从字符串中查找所有匹配的字串，返回一个列表
re.findall(str1, string)

从字符串中查找所有匹配的字串，返回一个迭代器
re.finditer(str1, string)

#替换字符
方法1：
re.sub(pattern, repl,  str)
repl：为替换的结果
str：原始字符串
方法2：还显示替换的次数
re.subn(pattern, repl, str)

分割字符串：
re.split(pattern, str1)


返回匹配对象，当有参数时，返回特定子组
m.group()：返回匹配对象
m.group(1):返回第一个子组

以元组形式返回所有子组，若没有子组则返回空元组
m.groups()





