1、序列操作符
成员关系运算符：返回一个bool值
in：判断一个元素是在序列中
not in：判断一个元素不在序列中

取值：
seq[ind]：取下表为ind的元素
seq[ind1:ind2]：切片取值
seq[ind1:ind2:step] ：切片取值，指定步长

seq[:None]：可以取出所有的元素

链接操作符：
seq1 + seq2

重复操作符：
seq * n：序列重复n次
___________________________________________________________________________________
2、内建函数
list(iter)：将可迭代对象转换为列表
list('abcd') -> ['a', 'b', 'c', 'd']

tuple(iter)：将可迭代对象转换为元组
tuple('abcd') = ('a', 'b', 'c', 'd')

str(obj)：将obj对象转换成字符串形式
str(123) = '123'

unicode(obj)：将obj对象转换成unicode字符串形式
unicode(123) = u'123'

enumerate(iter)：返回是一个enumerate对象，通常用于for循环，将元素与索引一一对应
for i, v in enumerate('abcd'):
	print i, v 

max(iter)：返回iter的最大值

min(iter)：返回iter的最小值

sorted(iter)：排序iter，返回一个列表

zip(iter1, iter2)：将iter1，iter2压缩成一个列表，会自动排序

reversed(seq)：反向输出序列；返回的是一个reversed对象

sum(seq)：求和
___________________________________________________________________________________
3、字符串

内建函数-检查的方法
如下方法，均返回bool值

检查字符串的开始和结尾：可以指定检查范围
str1.startswith('a', start, end)：检查是否以‘a’开始
str1.endswith('c', start, end)：检查是否以‘c’结束

检查字符串是否仅由字母和数字组成
str1.isalnum()

检查字串串是否仅由字母组成
str1.isalpha()

检查字符串是否有十进制数字组成，str1必须为unicode对象
str1.isdecimal()

检查字符串是否仅由十进制数字组成
str1.isdigit()

检查str1是否全是小写字母
str1.islower()

检查str1是否全是大写字母
str1.isupper()

检查str1是否仅由空格组成
str1.isspace()

检查str1的所有单词，是否首字母都是大写
str1.istitle()
___________________________________________________________________________________
转换方法：
把字符串的第一个字符大写
str1.capitalize()：

将字符串的制表符键转换为空格：返回转换后的字符串，num制表符替换成空格的数量
str1.expandtabs(num)

替换字符串的内容：
str1.replace(src, dest), 将sub1的内容用sub2进行替换，可以指定替换次数

大小写转换：
str1.swapcase()
小写转换大写
str1.upper()
大写转换小写
str1.lower()

将字符串的所有单词首字母大写
str1.title()

翻译字符串：需要先从string中导入maketrans方法
可设置过滤字符，过滤的字符在最终的字符串中不显示
from string import maketrans
trantab = maketrans(intab, outtab)
str1.translate(trantab)

intab：待翻译的字符串
outtab：要求翻译成的字符串
___________________________________________________________________________________
检查方法：
返回str在字符串中出现的次数，可以指定查找范围
str1.count(sub， beg=0,end=len(string))

查找字符串是否存在某一个字符串中：存在返回字串开始的索引值，否则返回-1
str1.find(sub)
str1.rfind(sub)：从右边开始查找，返回元素的真实索引
 

str1.index(sub)：功能和find一样，如果不存在抛出异常
___________________________________________________________________________________
编码解码
str1.decode('utf8')：以utf8格式解码str1
str1.encode('utf8')：以utf8格式编码str1
___________________________________________________________________________________
分割连接
以'连接符'连接str1中的每个字符，返回一个字符串
连接符.join(str1)

以'分割符'分割str1，默认分割服为空格，制表符，换行， 返回一个列表， 可指定分割的次数
str1.split('分割符')

以分隔符分割字符串为一个三元素的元组：
str1.partition('分隔符')
str1.rpartition('分隔符')：从右边开始查找分割元素

按行进行分割，可指定切割行数
str1.splitlines()
___________________________________________________________________________________
排版的方法
width为指定宽度，不足补空格

字符串居中
str1.center(width)

字符串左对齐
str1.ljust(width)

字符串右对齐
str1.rjust(width)

右对齐，多余的补零
str1.zfill(width)
___________________________________________________________________________________
截取
截掉字符串左边的空格：
str1.lstrip()

截掉字符串右边的空格：
str1.rstrip()

截掉字符串两边的空格：
str1.strip()
___________________________________________________________________________________
4、列表：可变对象、列表间的比较是两个列表中的元素逐个比较，直到一方胜出

访问元素
list1：为一个列表

通过切片方式：
list1[start:end]

通过索引访问
list1[index]
___________________________________________________________________________________
更新列表

通过赋值方式：
list1[index] = 'xx'

通过append方法：
list1.append('xx')

通过insert方法：
list1.insert('xx', index)
___________________________________________________________________________________
删除列表
确定删除的索引：
del list[index]：删除索引为index的元素

删除指定的元素：
list1.remove('xx')

通过pop删除末尾元素，返回删除的元素对象：
list1.pop()
___________________________________________________________________________________
列表解析式
举例：
[ i for i in range(8) if i % 2 == 0 ]
___________________________________________________________________________________
内建函数

连接列表
把序列list2 的内容添加到list1列表中
list1.extend(list2)
___________________________________________________________________________________
查找元素
返回obj 在列表中出现的次数：
list1.count(obj)

返回obj在list1中的第一个位置出现的索引，没有抛出异常
list1.index(obj)
___________________________________________________________________________________
排序
反向输出列表
list.reverse()

排序列表成员
list.sort()
___________________________________________________________________________________

5、元组
访问元组
tuple1：为一个元组

通过切片方式：
tuple1[start:end]

通过索引访问
tuple[index]
___________________________________________________________________________________
内建函数
obj在元组中出现的次数：
tuple1.count(obj)

obj在元组中的索引值
tuple1.index(obj)





